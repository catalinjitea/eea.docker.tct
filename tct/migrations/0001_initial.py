# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-09-04 12:19
from __future__ import unicode_literals

from django.db import migrations, models
from django.conf import settings
import django.db.models.deletion
import mptt.fields
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AichiGoal',
            fields=[
                ('code', models.CharField(max_length=1, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='AichiIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512, verbose_name='Operational Indicator')),
                ('question', models.CharField(max_length=255, verbose_name='Communication Question')),
                ('head_indicator', models.CharField(max_length=255, verbose_name='Headline Indicator')),
                ('sub_indicator', models.CharField(max_length=255, verbose_name='Indicator Sub-topics')),
                ('classification', models.CharField(max_length=255, verbose_name='Operational Classification')),
                ('status', models.TextField(blank=True, verbose_name='Status of development')),
                ('sensitivity', models.CharField(blank=True, choices=[(b'low', b'Low'), (b'med', b'Medium'), (b'hig', b'High')], max_length=3, verbose_name='Sensitivity (can it be used to make assessment by 2015?)')),
                ('validity', models.CharField(blank=True, choices=[(b'low', b'Low'), (b'med', b'Medium'), (b'hig', b'High')], max_length=3, verbose_name='Scientific Validity')),
                ('ease_of_communication', models.CharField(blank=True, choices=[(b'low', b'Low'), (b'med', b'Medium'), (b'hig', b'High')], max_length=3, verbose_name='How easy can it be communicated?')),
                ('sources', models.CharField(blank=True, max_length=255, verbose_name='Data Sources')),
                ('requirements', models.TextField(blank=True, verbose_name='Requirements')),
                ('measurer', models.TextField(blank=True, verbose_name="Who's responsible for measuring?")),
                ('conventions', models.CharField(blank=True, max_length=255, verbose_name='Other conventions/processes using indicator')),
            ],
        ),
        migrations.CreateModel(
            name='AichiTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('indicators', models.ManyToManyField(blank=True, related_name='relevant_target', to='tct.AichiIndicator')),
                ('other_indicators', models.ManyToManyField(blank=True, related_name='other_targets', to='tct.AichiIndicator')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='CMSGoal',
            fields=[
                ('code', models.CharField(max_length=1, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='CMSTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('aichi_targets', models.ManyToManyField(blank=True, related_name='cms_targets', to='tct.AichiTarget')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='EuAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'verbose_name_plural': 'EU actions',
            },
        ),
        migrations.CreateModel(
            name='EuAichiStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aichi_targets', models.ManyToManyField(related_name='eu_aichi_strategy', to='tct.AichiTarget', verbose_name=b'Aichi targets')),
            ],
            options={
                'verbose_name_plural': ' Mappings: EU targets to Aichi',
            },
        ),
        migrations.CreateModel(
            name='EuIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=25, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('indicator_type', models.CharField(blank=True, choices=[(b'sebi', b'SEBI'), (b'csi', b'CSI'), (b'aei', b'AEI')], max_length=4, verbose_name='Indicator type')),
                ('category', models.CharField(choices=[(b'headline', b'Headline indicators'), (b'other', b'Other indicators')], max_length=32)),
                ('parent', models.ManyToManyField(blank=True, related_name='parents', to='tct.EuIndicator')),
            ],
            options={
                'ordering': ['code'],
                'verbose_name_plural': 'EU indicators',
            },
        ),
        migrations.CreateModel(
            name='EuIndicatorToAichiStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aichi_targets', models.ManyToManyField(related_name='eu_indicator_aichi_strategy', to='tct.AichiTarget', verbose_name=b'Aichi targets')),
                ('eu_indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eu_indicator_aichi_strategy', to='tct.EuIndicator', verbose_name=b'EU Biodiversity Indicator')),
                ('other_aichi_targets', models.ManyToManyField(blank=True, related_name='eu_indicator_other_aichi_strategy', to='tct.AichiTarget', verbose_name=b'Other Aichi targets')),
            ],
            options={
                'ordering': ['eu_indicator'],
                'verbose_name_plural': 'Mappings: EU indicators to Aichi',
            },
        ),
        migrations.CreateModel(
            name='EuTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('actions', models.ManyToManyField(blank=True, related_name='target', to='tct.EuAction')),
                ('indicators', models.ManyToManyField(blank=True, related_name='targets', to='tct.EuIndicator')),
            ],
            options={
                'ordering': ['code'],
                'verbose_name_plural': 'EU targets',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='NationalAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tct.NationalAction')),
            ],
        ),
        migrations.CreateModel(
            name='NationalIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=25, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('category', models.CharField(choices=[(b'headline', b'Headline indicators'), (b'other', b'Other indicators')], max_length=32)),
                ('subindicators', models.ManyToManyField(blank=True, related_name='parents', to='tct.NationalIndicator')),
            ],
            options={
                'ordering': ['code'],
                'verbose_name_plural': 'National indicators',
            },
        ),
        migrations.CreateModel(
            name='NationalObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16, unique=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('actions', models.ManyToManyField(blank=True, related_name='objective', to='tct.NationalAction')),
                ('nat_indicators', models.ManyToManyField(blank=True, related_name='nat_objectives', to='tct.NationalIndicator')),
                ('other_nat_indicators', models.ManyToManyField(blank=True, related_name='other_nat_objectives', to='tct.NationalIndicator')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tct.NationalObjective')),
            ],
        ),
        migrations.CreateModel(
            name='NationalStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objective_national_strategy', to='tct.NationalObjective', verbose_name=b'National Objective')),
                ('other_targets', models.ManyToManyField(blank=True, related_name='other_targets_national_strategy', to='tct.AichiTarget', verbose_name=b'Other AICHI targets')),
                ('relevant_targets', models.ManyToManyField(blank=True, related_name='relevant_targets_national_strategy', to='tct.AichiTarget', verbose_name=b'Relevant AICHI Targets')),
            ],
            options={
                'verbose_name_plural': ' Mappings: National strategy to AICHI&EU',
            },
        ),
        migrations.CreateModel(
            name='NavbarLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=12)),
                ('title', models.CharField(blank=True, max_length=64)),
                ('url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='RamsarGoal',
            fields=[
                ('code', models.CharField(max_length=1, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='RamsarTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('aichi_targets', models.ManyToManyField(blank=True, related_name='ramsar_targets', to='tct.AichiTarget')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Scale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='TCTPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handle', models.CharField(max_length=32)),
            ],
        ),
        migrations.AddField(
            model_name='ramsargoal',
            name='targets',
            field=models.ManyToManyField(related_name='ramsar_goals', to='tct.RamsarTarget'),
        ),
        migrations.AddField(
            model_name='nationalaction',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tct.Region'),
        ),
        migrations.AddField(
            model_name='eutarget',
            name='national_strategy',
            field=models.ManyToManyField(blank=True, related_name='eu_targets', to='tct.NationalStrategy', verbose_name=b'National objectives'),
        ),
        migrations.AddField(
            model_name='eutarget',
            name='other_indicators',
            field=models.ManyToManyField(blank=True, related_name='other_targets', to='tct.EuIndicator'),
        ),
        migrations.AddField(
            model_name='eutarget',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tct.EuTarget'),
        ),
        migrations.AddField(
            model_name='euaichistrategy',
            name='eu_targets',
            field=models.ManyToManyField(related_name='eu_aichi_strategy', to='tct.EuTarget', verbose_name=b'EU Biodiversity Target'),
        ),
        migrations.AddField(
            model_name='euaichistrategy',
            name='other_aichi_targets',
            field=models.ManyToManyField(blank=True, related_name='eu_other_aichi_strategy', to='tct.AichiTarget', verbose_name=b'Other Aichi targets'),
        ),
        migrations.AddField(
            model_name='euaction',
            name='national_strategy',
            field=models.ManyToManyField(blank=True, related_name='eu_actions', to='tct.NationalStrategy', verbose_name=b'National strategy'),
        ),
        migrations.AddField(
            model_name='euaction',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tct.EuAction'),
        ),
        migrations.AddField(
            model_name='euaction',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tct.Region'),
        ),
        migrations.AddField(
            model_name='cmsgoal',
            name='targets',
            field=models.ManyToManyField(related_name='cms_goals', to='tct.CMSTarget'),
        ),
        migrations.AddField(
            model_name='aichiindicator',
            name='links',
            field=models.ManyToManyField(blank=True, to='tct.Link', verbose_name='Related Links'),
        ),
        migrations.AddField(
            model_name='aichiindicator',
            name='scales',
            field=models.ManyToManyField(blank=True, to='tct.Scale', verbose_name='Scale (global, regional, national, sub-national)'),
        ),
        migrations.AddField(
            model_name='aichigoal',
            name='targets',
            field=models.ManyToManyField(related_name='goals', to='tct.AichiTarget'),
        ),
    ]

    for i, lang in enumerate(settings.LANGUAGES):

        if i == 0:
            kw = {'blank': False, 'null': False}
        else:
            kw = {'blank': True, 'null': True}

        operations.append(
            migrations.AddField(
                model_name='aichigoal',
                name='title_%s' % lang[0],
                field=models.TextField(max_length=512, verbose_name=b'Title',
                                       **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='aichitarget',
                name='description_%s' % lang[0],
                field=models.TextField(verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='euaction',
                name='description_%s' % lang[0],
                field=models.TextField(verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='euindicator',
                name='title_%s' % lang[0],
                field=models.TextField(max_length=512, verbose_name=b'Title',
                                       **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='eutarget',
                name='title_%s' % lang[0],
                field=models.TextField(max_length=512, verbose_name=b'Title',
                                       **kw),
            )
        )
        operations.append(
            migrations.AddField(
                model_name='eutarget',
                name='description_%s' % lang[0],
                field=models.TextField(verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='nationalaction',
                name='title_%s' % lang[0],
                field=models.TextField(max_length=512, verbose_name=b'Title',
                                       **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='nationalindicator',
                name='title_%s' % lang[0],
                field=models.TextField(max_length=512, verbose_name=b'Title',
                                       **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='nationalobjective',
                name='title_%s' % lang[0],
                field=models.TextField(max_length=512, verbose_name=b'Title',
                                       **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='tctpage',
                name='title_%s' % lang[0],
                field=models.CharField(max_length=128, verbose_name=b'Title', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='cmsgoal',
                name='title_%s' % lang[0],
                field=models.TextField(
                    max_length=512, verbose_name=b'Title', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='cmsgoal',
                name='description_%s' % lang[0],
                field=tinymce.models.HTMLField(
                    verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='cmstarget',
                name='description_%s' % lang[0],
                field=models.TextField(verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='ramsargoal',
                name='title_%s' % lang[0],
                field=models.TextField(
                    max_length=512, verbose_name=b'Title', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='ramsargoal',
                name='description_%s' % lang[0],
                field=tinymce.models.HTMLField(
                    verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='ramsartarget',
                name='description_%s' % lang[0],
                field=models.TextField(verbose_name=b'Description', **kw),
            )
        )

    for i, lang in enumerate(settings.LANGUAGES):

        if i == 0:
            kw = {}
        else:
            kw = {'blank': True, 'null': True}

        operations.append(
            migrations.AddField(
                model_name='aichigoal',
                name='description_%s' % lang[0],
                field=tinymce.models.HTMLField(verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='euaction',
                name='title_%s' % lang[0],
                field=models.TextField(verbose_name=b'Title', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='nationalaction',
                name='description_%s' % lang[0],
                field=tinymce.models.HTMLField(verbose_name=b'Description', **kw),
            )
        )

        operations.append(
            migrations.AddField(
                model_name='nationalobjective',
                name='description_%s' % lang[0],
                field=tinymce.models.HTMLField(verbose_name=b'Description', **kw),
            )
        )

    for i, lang in enumerate(settings.LANGUAGES):

        if i == 0:
            kw = {'default': ''}
            field_kw = {'preserve_default': False}
        else:
            kw = {'blank': True, 'null': True}
            field_kw = {}

        operations.append(
            migrations.AddField(
                model_name='nationalindicator',
                name='description_%s' % lang[0],
                field=tinymce.models.HTMLField(verbose_name=b'Description', **kw),
                **field_kw
            )
        )

        operations.append(
            migrations.AddField(
                model_name='tctpage',
                name='body_%s' % lang[0],
                field=models.TextField(verbose_name=b'Body', **kw),
                **field_kw
            )
        )

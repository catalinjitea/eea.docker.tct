import os.path

from functools import wraps
from fabric.api import *
from fabric.contrib.files import exists


COUNTRIES = [('andorra', 'Andorra'),
 ('albania', 'Albania'),
 ('armenia', 'Armenia'),
 ('algerie', 'Algerie'),
 ('austria', 'Austria'),
 ('azerbaijan', 'Azerbaijan'),
 ('bosnia_herzegovina', 'Bosnia'),
 ('bulgaria', 'Bulgaria'),
 ('burkinafaso', 'Burkinafaso'),
 ('benin', 'Benin'),
 ('burundi', 'Burundi'),
 ('belarus', 'Belarus'),
 ('switzerland', 'Switzerland'),
 ('cyprus', 'Cyprus'),
 ('cbd', 'cbd'),
 ('comifac', 'comifac'),
 ('cotedivoire', 'Cotedivoire'),
 ('cameroun', 'Cameroun'),
 ('czech', 'Czech'),
 ('denmark', 'Denmark'),
 ('germany', 'Germany'),
 ('estonia', 'Estonia'),
 ('spain', 'Spain'),
 ('finland', 'Finland'),
 ('france', 'France'),
 ('united_kingdom', 'United'),
 ('georgia', 'Georgia'),
 ('gibraltar', 'Gibraltar'),
 ('greece', 'Greece'),
 ('croatia', 'Croatia'),
 ('hungary', 'Hungary'),
 ('ireland', 'Ireland'),
 ('iceland', 'Iceland'),
 ('italy', 'Italy'),
 ('kyrgyzstan', 'Kyrgyzstan'),
 ('kazakhstan', 'Kazakhstan'),
 ('liechtenstein', 'Liechtenstein'),
 ('lithuania', 'Lithuania'),
 ('luxembourg', 'Luxembourg'),
 ('latvia', 'Latvia'),
 ('monaco', 'Monaco'),
 ('moldova', 'Moldova'),
 ('montenegro', 'Montenegro'),
 ('macedonia', 'Macedonia'),
 ('madagascar', 'Madagascar'),
 ('malta', 'Malta'),
 ('maroc', 'Maroc'),
 ('norway', 'Norway'),
 ('niger', 'Niger'),
 ('netherlands', 'Netherlands'),
 ('poland', 'Poland'),
 ('portugal', 'Portugal'),
 ('romania', 'Romania'),
 ('serbia', 'Serbia'),
 ('russia', 'Russia'),
 ('rdc', 'Rdc'),
 ('sweden', 'Sweden'),
 ('slovenia', 'Slovenia'),
 ('slovakia', 'Slovakia'),
 ('tajikistan', 'Tajikistan'),
 ('turkmenistan', 'Turkmenistan'),
 ('turkey', 'Turkey'),
 ('ukraine', 'Ukraine'),
 ('uzbekistan', 'Uzbekistan'),
 ('kosovo', 'Kosovo'),
 ('training', 'Training'),]

env['nbsap_target_defs'] = {
    'staging': {
        'host_string': 'edw@nbsap.eaudeweb.ro',
        'nbsap_repo':     '/var/local/nbsap-staging',
        'nbsap_sandbox':  '/var/local/nbsap-staging/sandbox',
        'nbsap_instance': '/var/local/nbsap-staging',
        'supervisor_process': 'nbsap-staging',

    },
    'production': {
        'host_string': 'edw@nbsap.eaudeweb.ro',
        'nbsap_repo':     '/var/local/nbsap-django',
        'nbsap_sandbox':  '/var/local/nbsap-django/sandbox',
        'nbsap_instance': '/var/local/nbsap-django/instance',
        'supervisor_process': 'nbsap',
    },
}

env['nbsap_default_target'] = 'staging'

def choose_target(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        name = kwargs.pop('target', None)
        if name is None and 'nbsap_target' not in env:
            name = env['nbsap_default_target']

        if name is None:
            target_env = {}
        else:
            target_env = env['nbsap_target_defs'][name]
            target_env['nbsap_target'] = name

        with settings(**target_env):
            return func(*args, **kwargs)

    return wrapper


@task
@choose_target
def install():
    if not exists("%(nbsap_repo)s/.git" % env):
        run("git init '%(nbsap_repo)s'" % env)

    local("git push -f '%(host_string)s:%(nbsap_repo)s' HEAD:incoming" % env)
    with cd(env['nbsap_repo']):
        run("git reset incoming --hard")

    if not exists(env['nbsap_sandbox']):
        run("virtualenv -p /var/local/python27/bin/python --no-site-packages '%(nbsap_sandbox)s'" % env)
        run("echo '*' > '%(nbsap_sandbox)s/.gitignore'" % env)

    run("%(nbsap_sandbox)s/bin/pip install -U distribute" % env)

    run("%(nbsap_sandbox)s/bin/pip install "
        "-r %(nbsap_repo)s/requirements.txt"
        % env)

    run("%(nbsap_sandbox)s/bin/pip install -e %(nbsap_repo)s" % env)


def supervisor(root, command):
    run('%s/sandbox/bin/supervisorctl %s' %
        (root, command))


@task
@choose_target
def restart():
    supervisor(env['nbsap_repo'], "restart %s" % env['supervisor_process'])


@task
@choose_target
def status():
    supervisor(env['nbsap_repo'],"status")



@task
@choose_target
def syncdb():
    data = dict(env)
    for c in COUNTRIES:
        data['country'] = c[0]
        run("%(nbsap_sandbox)s/bin/python "
            "%(nbsap_repo)s/instance_%(country)s/manage.py syncdb"
            % data)
        # run("%(nbsap_sandbox)s/bin/python "
        #     "%(nbsap_repo)s/instance_%(country)s/manage.py load_fixtures"
        #     % data)

        run("%(nbsap_sandbox)s/bin/python "
            "%(nbsap_repo)s/instance_%(country)s/manage.py loaddata pages"
            % data)
